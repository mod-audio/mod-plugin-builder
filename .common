#!/bin/bash

#######################################################################################################################
# exit if any command fails

set -e

#######################################################################################################################
# environment variables

WORKDIR=${WORKDIR:=~/mod-workdir}

#######################################################################################################################
# Colored print functions

function error {
  echo -e "\e[0;31m"$@"\e[0m"
  exit 1
}

function info {
  echo -e "\e[0;32m"$@"\e[0m"
}

function warn {
  echo -e "\e[0;33m"$@"\e[0m"
}

#######################################################################################################################
# check for old installation

if [ -d ${WORKDIR}/build ]; then
  info "mod-plugin-builder has been updated to support multiple platforms"
  info "Unfortunately this requires a complete rebuild of its packages"
  error "Please delete ${WORKDIR} and re-run bootstrap.sh"
fi

if [ -z "${PLATFORM}" ]; then
  error "Incorrect use of .common, PLATFORM not defined!"
fi

#######################################################################################################################
# check for debug builds

if [[ "${PLATFORM}" == *"-debug" ]]; then
  TOOLCHAIN_PLATFORM="$(echo ${PLATFORM} | sed 's/-debug//')"
else
  TOOLCHAIN_PLATFORM="${PLATFORM}"
fi

#######################################################################################################################
# check for kernel builds

if [[ "${PLATFORM}" == *"-kernel" ]]; then
  BR2_BUILD_CONFIG="kernel"
  BR2_PLATFORM="$(echo ${PLATFORM} | sed 's/-kernel//' | sed 's/-new//')"
  TOOLCHAIN_PLATFORM="$(echo ${PLATFORM} | sed 's/-kernel//' | sed 's/-new//')-new"
else
  BR2_BUILD_CONFIG="plugins-dep"
  BR2_PLATFORM="${TOOLCHAIN_PLATFORM}"
fi

#######################################################################################################################
# check for generic builds

if [[ "${PLATFORM}" == "generic-aarch64-"* ]] || [[ "${PLATFORM}" = "darkglass-anagram"* ]]; then
  TOOLCHAIN_PLATFORM="generic-aarch64"
  BR2_PLATFORM="${PLATFORM}"
fi

#######################################################################################################################
# check for readlink binary

if [ -f "/opt/local/bin/greadlink" ]; then
  readlink="/opt/local/bin/greadlink"
else
  readlink="readlink"
fi

#######################################################################################################################
# macOS support through homebrew

if [ -d "/usr/local/opt/ncurses/bin" ]; then
  export CPPFLAGS="-I/usr/local/opt/ncurses/include -I/opt/homebrew/opt/gettext/include"
  export LDFLAGS="-L/usr/local/opt/ncurses/lib -L/opt/homebrew/opt/gettext/lib"
  export PATH="/usr/local/opt/ncurses/bin:${PATH}"
fi

#######################################################################################################################
# define buildroot and toolchain version per platform

case "${TOOLCHAIN_PLATFORM}" in
  # old targets: ct-ng 1.22 with gcc 4.9 + glibc 2.21
  "modduo"|"modduox")
    BUILDROOT_TAR_EXT=bz2
    BUILDROOT_VERSION=buildroot-2016.02
    CT_NG_VERSION=crosstool-ng-1.22.0
  ;;
  # intermediate targets: ct-ng 1.24 with gcc 7.5 + glibc 2.27 on dwarf or glibc 2.21 on duo/duox (static)
  "modduo-static"|"modduox-static"|"moddwarf")
    BUILDROOT_TAR_EXT=bz2
    BUILDROOT_VERSION=buildroot-2016.02
    CT_NG_VERSION=crosstool-ng-1.24.0
  ;;
  # new targets: ct-ng 1.25 with gcc 9 + glibc 2.27
  "modduo-new"|"modduox-new"|"moddwarf-new")
    BUILDROOT_VERSION=buildroot-2016.02
    CT_NG_VERSION=crosstool-ng-1.25.0
  ;;
  # generic targets: ct-ng 1.25 with gcc 9 + glibc 2.34
  "generic-aarch64"|"generic-x86_64")
    BUILDROOT_VERSION=buildroot-2023.11.3
    CT_NG_VERSION=crosstool-ng-1.25.0
  ;;
  # fallback
  *)
    BUILDROOT_TAR_EXT=bz2
    BUILDROOT_VERSION=buildroot-2016.02
    CT_NG_VERSION=crosstool-ng-1.24.0
  ;;
esac

#######################################################################################################################
# crosstool-ng variables

CT_NG_LINK=http://crosstool-ng.org/download/crosstool-ng/
CT_NG_FILE=${CT_NG_VERSION}.tar.bz2

#######################################################################################################################
# buildroot variables

if [ "${BUILDROOT_VERSION}" = "buildroot-2016.02" ]; then
  BUILDROOT_TAR_EXT=bz2
else
  BUILDROOT_TAR_EXT=xz
fi

BUILDROOT_LINK=http://buildroot.uclibc.org/downloads/
BUILDROOT_FILE=${BUILDROOT_VERSION}.tar.${BUILDROOT_TAR_EXT}

SOURCE_DIR=$("${readlink}" -f $(dirname ${0}))
BR2_EXTERNAL=${SOURCE_DIR}/${BR2_BUILD_CONFIG}
BR2_MAKE="make O=${WORKDIR}/${PLATFORM} BR2_EXTERNAL=${BR2_EXTERNAL} BR2_EXTERNAL_PLUGINS_DEP=${BR2_EXTERNAL} BR2_PLATFORM=${BR2_PLATFORM}"
BR2_TARGET=${WORKDIR}/${PLATFORM}/target

#######################################################################################################################
# setup directories

BUILD_DIR=${WORKDIR}/${PLATFORM}/build
DOWNLOAD_DIR=${WORKDIR}/download
TOOLCHAIN_DIR=${WORKDIR}/${TOOLCHAIN_PLATFORM}/toolchain
TOOLCHAIN_BUILD_DIR=${WORKDIR}/${TOOLCHAIN_PLATFORM}/build

mkdir -p ${BUILD_DIR}
mkdir -p ${DOWNLOAD_DIR}
mkdir -p ${TOOLCHAIN_DIR}

if [[ "${BR2_BUILD_CONFIG}" != "kernel" ]]; then
  PLUGINS_DIR=${WORKDIR}/${PLATFORM}/plugins
  mkdir -p ${PLUGINS_DIR}
fi

#######################################################################################################################
