#!/bin/bash

cd $(dirname ${0})

#######################################################################################################################
# check arguments

PLATFORM=$1
PACKAGE=$2

if [ -z "${PLATFORM}" ] || [ -z "${PACKAGE}" ] || [ ! -e "plugins-dep/configs/${PLATFORM}_defconfig" ]; then
  echo "Usage: $0 <platform> <plugin-package-name>"
  echo "  Where platform can be one of: $(echo $(ls plugins-dep/configs | grep _defconfig | sed 's/_defconfig//g' | sort))"
  echo "  and plugin-package-name is a folder inside ./plugins/package"
  exit 1
fi

#######################################################################################################################
# Import common code and variables

source .common

#######################################################################################################################
# cleanup "package"

if [[ "${PACKAGE}" == "cleanup" ]]; then
  # cleanup previous
  rm -rf ${WORKDIR}/tmp-lv2-spec

  # make sure plugins dir exists and it's clean
  mkdir -p ${PLUGINS_DIR}
  rm -rf ${PLUGINS_DIR}/plugins/*

  # move lv2 spec to a temp dir so we can delete everything else
  mkdir ${WORKDIR}/tmp-lv2-spec
  mv ${BR2_TARGET}/usr/lib/lv2/{atom,buf-size,data-access,dynmanifest,event,instance-access,log,lv2core,midi,morph,options,parameters,patch,port-groups,port-props,presets,resize-port,schemas,state,time,ui,units,urid,uri-map,worker}.lv2 ${WORKDIR}/tmp-lv2-spec/
  rm -rf ${BR2_TARGET}/usr/lib/lv2/*
  mv ${WORKDIR}/tmp-lv2-spec/* ${BR2_TARGET}/usr/lib/lv2/
  rmdir ${WORKDIR}/tmp-lv2-spec

  # just in case
  rm -rf ${BR2_TARGET}/usr/local/lib/lv2

  # all done!
  exit 0
fi

#######################################################################################################################
# if rebuilding, strip "-rebuild" suffix from PACKAGE

if [[ "${PACKAGE}" == *"-rebuild" ]]; then
    PACKAGE=$(echo ${PACKAGE} | awk 'sub("-rebuild","")')
    PKGSUFFIX="-rebuild"
fi

#######################################################################################################################
# if -publish suffix is used, call publish script and exit this script

if [[ "${PACKAGE}" == *"-publish" ]]; then
    PACKAGE=$(echo ${PACKAGE} | awk 'sub("-publish","")')
    ./publish "${PLATFORM}" "${PACKAGE}"
    exit 0
fi

#######################################################################################################################
# Check if requested plugin package exists

if [[ "${PACKAGE}" != *"-dirclean" ]] && [[ "${PACKAGE}" != "menuconfig" ]]; then
  PACKAGE=$(basename ${PACKAGE} | sed "s|\.mk||")
  PKGNAME=$(echo ${PACKAGE} | tr a-z- A-Z_)

  if [ ! -d ${SOURCE_DIR}/plugins/package/${PACKAGE} ]; then
    error "Plugin package name '${PACKAGE}' does not exist"
    exit 1
  fi
  if [ ! -f ${SOURCE_DIR}/plugins/package/${PACKAGE}/${PACKAGE}.mk ]; then
    error "Requested plugin package has no 'mk' file"
    exit 1
  fi

  bundles=($(cat ${SOURCE_DIR}/plugins/package/${PACKAGE}/${PACKAGE}.mk | awk 'sub("'${PKGNAME}'_BUNDLES = ","")'))
  if [[ "${bundles}" == "" ]]; then
    error "Requested plugin package has no bundles"
    exit 1
  fi
fi

#######################################################################################################################
# buildroot setup

export DOWNLOAD_PATH=${DOWNLOAD_DIR}
export TOOLCHAIN_PATH=${TOOLCHAIN_DIR}

mkdir -p /tmp/skeleton

#######################################################################################################################
# now building...

cd ${BUILD_DIR}/${BUILDROOT_VERSION}
${BR2_MAKE} ${PLATFORM}_defconfig &>/dev/null
${BR2_MAKE} ${PACKAGE}${PKGSUFFIX}

#######################################################################################################################
# if cleaning, stop here

if [[ "${PACKAGE}" == *"-dirclean" ]]; then
  # run host-*-dirclean
  ${BR2_MAKE} host-${PACKAGE} &>/dev/null
  exit 0
fi

#######################################################################################################################
# internal: check for a menuconfig "package" to automatically save config

if [[ "${PACKAGE}" == *"menuconfig"* ]]; then
    PREFIX=$(echo ${PACKAGE} | sed 's/menuconfig//g')
    if [[ "$PREFIX" == "" ]]; then
        ${BR2_MAKE} savedefconfig
    else
        ${BR2_MAKE} "$PREFIX"update-config
    fi

    info "Changes of ${PACKAGE} saved to correspondent configuration file"
fi

#######################################################################################################################
# copy the requested plugin bundles

function bundle_has_binaries
{
  for f in "$1"/*.so; do
    if [ -e "$f" ]; then
      return 1;
    fi
  done
  return 0
}

function try_copy_plugin_bundles
{
  path="$1"

  for bundle in ${bundles[@]}; do
    if [ ! -d ${path}/${bundle} ]; then
      return
    fi
  done

  ls ${WORKDIR}/${PLATFORM}/plugins
  if [ -z "`ls ${WORKDIR}/${PLATFORM}/plugins`" ]; then
    was_empty="1"
  else
    was_empty="0"
  fi

  for bundle in ${bundles[@]}; do
    rm -rf ${WORKDIR}/${PLATFORM}/plugins/${bundle}
    cp -rL ${path}/${bundle} ${WORKDIR}/${PLATFORM}/plugins/${bundle}
    info "Finished copying ${bundle}"
  done

  if [ ${was_empty} == "1" ]; then
    for bundle in `ls ${path}`; do
      if ( bundle_has_binaries ${path}/${bundle} ); then
        continue
      fi
      if [[ " ${bundles[@]} " =~ " ${bundle} " ]]; then true; else
        echo "NOTE: Bundle '$bundle' possibly missing from _BUNDLES definition"
      fi
    done
  fi

  exit 0
}

#######################################################################################################################
# copy the requested plugin projects

if [[ "${PACKAGE}" != "menuconfig" ]]; then
  mkdir -p ${WORKDIR}/${PLATFORM}/plugins

  try_copy_plugin_bundles ${BR2_TARGET}/usr/lib/lv2
  try_copy_plugin_bundles ${BR2_TARGET}/usr/local/lib/lv2

  error "Failed to find plugin installed bundles"
fi

#######################################################################################################################
